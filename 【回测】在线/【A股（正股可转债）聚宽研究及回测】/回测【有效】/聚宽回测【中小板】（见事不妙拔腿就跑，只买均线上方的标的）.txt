# 联系方式:lianghuajiaoyi123456
#导入函数库
from jqdata import *
from jqfactor import get_factor_values
import numpy as np
import pandas as pd

#初始化函数 
def initialize(context):
    g.printlog=False#设置是否打印交易日志
    # g.printlog=True#设置是否打印交易日志
    if g.printlog==True:#打印交易日志
        g.tradelog=pd.DataFrame({})
    # 设定基准
    set_benchmark('000905.XSHG')
    # 用真实价格交易
    set_option('use_real_price', True)
    # 打开防未来函数
    set_option("avoid_future_data", True)
    # 将滑点设置为0
    # set_slippage(FixedSlippage(0))
    set_slippage(FixedSlippage(0.0246))
    # 设置交易成本万分之三，不同滑点影响可在归因分析中查看
    set_order_cost(OrderCost(open_tax=0, close_tax=0.001, open_commission=0.0003, close_commission=0.0003, close_today_commission=0, min_commission=5),type='fund')
    # 过滤order中低于error级别的日志
    log.set_level('order', 'error')
    #初始化全局变量
    g.stock_num = 30
    g.limit_days = 20
    g.limit_up_list = []
    g.hold_list = []
    g.history_hold_list = []
    g.not_buy_again_list = []
    g.stoploss_list = []  # 止损卖出列表
    g.other_sale    = []  # 其他（止盈）卖出列表
    g.min_mv = 10  # 股票最小市值要求
    g.max_mv = 100  # 股票最大市值要求
    # g.pass_months = [1, 4]  # 空仓的月份
    g.pass_months = []  # 空仓的月份
    g.stoploss_strategy = 1  # 1为止损线止损，2为市场趋势止损, 3为联合1、2策略
    g.stoploss_limit = 0.09  # 止损线
    g.stoploss_market = 0.05  # 市场趋势止损参数
    g.no_trading_today_signal = False
    g.run_stoploss = True  # 是否进行止损

    # 设置交易时间，每天运行
    run_daily(prepare_stock_list, time='9:05', reference_security='000300.XSHG')
    run_weekly(weekly_adjustment, weekday=1, time='9:32', reference_security='000300.XSHG')
    run_weekly(weekly_adjustment, weekday=4, time='9:32', reference_security='000300.XSHG')
    # run_weekly(weekly_adjustment, weekday=3, time='9:32', reference_security='000300.XSHG')
    # run_weekly(weekly_adjustment, weekday=2, time='9:32', reference_security='000300.XSHG')
    # run_weekly(weekly_adjustment, weekday=5, time='9:32', reference_security='000300.XSHG')

    run_daily(check_limit_up, time='14:00', reference_security='000300.XSHG')
    run_daily(stop_loss, time='10:00') # 止损函数
    run_daily(stop_loss, time='14:00') # 止损函数
    # run_daily(close_account, '14:50')
        
# #0-1 空仓模块
# def close_account(context):
#     g.no_trading_today_signal = today_is_between(context)
#     if not g.no_trading_today_signal:
#         curr_data = get_current_data()
#         if len(g.hold_list) != 0:
#             for stock in g.hold_list:
#                 if curr_data[stock].last_price == curr_data[stock].low_limit or curr_data[stock].paused:
#                     continue
#                 order_target_value(stock, 0)
#                 log.info("卖出[%s]" % (stock))


#1-3 准备股票池
def prepare_stock_list(context):
    if g.printlog==True:#打印交易日志
        print("打印日志")
        tradelog=g.tradelog
        write_file('tradelog.csv',tradelog.to_csv(),append=False)
    start_date=context.current_dt.date()
    g.today = get_trade_days(start_date=None, end_date=start_date, count=2)[1]
    g.yesterday = get_trade_days(start_date=None, end_date=start_date, count=2)[0]
    print(g.today,g.yesterday)

    #获取已持有列表
    g.hold_list= []
    for position in list(context.portfolio.positions.values()):
        stock = position.security
        g.hold_list.append(stock)
    #获取最近一段时间持有过的股票列表
    g.history_hold_list.append(g.hold_list)
    if len(g.history_hold_list) >= g.limit_days:
        g.history_hold_list = g.history_hold_list[-g.limit_days:]#g.limit_days也就是20天内交易过的标的不会再买入（正常排序）
    temp_set = set()
    for hold_list in g.history_hold_list:
        for stock in hold_list:
            temp_set.add(stock)
    g.not_buy_again_list = list(temp_set)
    #获取昨日涨停列表
    if g.hold_list != []:
        df = get_price(g.hold_list, end_date=context.previous_date, frequency='daily', fields=['close','high_limit'], count=1, panel=False, fill_paused=False)
        df = df[df['close'] == df['high_limit']]
        g.high_limit_list = list(df.code)
    else:
        g.high_limit_list = []

#1-4 整体调整持仓
def weekly_adjustment(context):
    #获取应买入列表
    
    g.no_trading_today_signal = today_is_between(context)
    if g.no_trading_today_signal== False:
        final_list = []
        return final_list
    yesterday = context.previous_date
    initial_list = get_all_securities().index.tolist()
    
    # 国九更新：过滤近一年净利润为负且营业收入小于1亿的
    # 国九更新：过滤近一年期末净资产为负的 (经查询没有为负数的，所以直接pass这条)
    # 国九更新：过滤近一年审计建议无法出具或者为负面建议的 (经过净利润等筛选，审计意见几乎不会存在异常)
    q = query(
        valuation.code,
        valuation.market_cap,
        income.np_parent_company_owners,
        income.net_profit,
        income.operating_revenue,
    ).filter(
        valuation.code.in_(initial_list),
        #市值限制留着没啥用
        # valuation.market_cap.between(g.min_mv,g.max_mv),  # 总市值 circulating_market_cap/market_cap 单位：亿元
        income.np_parent_company_owners > 0,   # 归属于母公司所有者的净利润(元)
        income.net_profit > 0,  # 净利润(元)
        income.operating_revenue > 1e8,  # 营业收入 (元)
    ).order_by(valuation.market_cap.asc()).limit(2000)
    df = get_fundamentals(q,date=yesterday)#不加yesterday是用的当日数据
    initial_list = df['code'].tolist()
    initial_list = filter_kcbj_stock(initial_list)
    initial_list = filter_st_stock(initial_list)
    test_list = filter_new_stock(context, initial_list,125)#过滤次新股
    
    # #这里起作用的是流通市值排序【最终收益受这个市值的影响比较大】
    # q = query(valuation.code,valuation.circulating_market_cap,indicator.eps).filter(valuation.code.in_(test_list)).order_by(valuation.circulating_market_cap.asc())
    # df = get_fundamentals(q,date=yesterday)
    # # df = df[df['eps']>0]#整体去掉之后对收益有影响，eps排序比市值排序更安全
    
    nls_list = list(df.code)[:int(2*g.stock_num)]
    q = query(valuation.code,valuation.circulating_market_cap).filter(valuation.code.in_(nls_list)).order_by(valuation.circulating_market_cap.asc())
    df = get_fundamentals(q,date=yesterday)
    target_list = list(df.code)
    
    
    target_list = filter_paused_stock(target_list)
    target_list = filter_limitup_stock(context, target_list)
    target_list = filter_limitdown_stock(context, target_list)
    #过滤最近买过且涨停过的股票
    recent_limit_up_list = get_recent_limit_up_stock(context, target_list, g.limit_days)
    # black_list = list(set(g.not_buy_again_list).intersection(set(recent_limit_up_list)))#过滤涨跌停和已经持仓过的股票
    # black_list = recent_limit_up_list#仅仅过滤涨跌停
    black_list = []#不过滤涨跌停
    target_list = [stock for stock in target_list if stock not in black_list]
    #截取不超过最大持仓数的股票量
    target_list = target_list[:min(g.stock_num,len(target_list))]
    current_positions = context.portfolio.positions
    #调仓卖出
    for stock in g.hold_list:
        if (stock not in target_list) and (stock not in g.high_limit_list):
            log.info("卖出[%s]" % (stock))
            position = context.portfolio.positions[stock]
            close_position(position)
            if g.printlog==True:#打印交易日志
                price = position.price
                avg_cost = position.avg_cost
                print("price,avg_cost",price,avg_cost)
                thislog=pd.DataFrame({"代码":[stock],"g.today":[g.today],"方向":["卖出(调仓)"],"涨跌幅":[price/avg_cost-1]})
                g.tradelog=pd.concat([g.tradelog,thislog])
        else:
            log.info("已持有[%s]" % (stock))
    #调仓买入【只买均线上方的标的】
    position_count = len(context.portfolio.positions)
    target_num = len(target_list)
    if target_num > position_count:
        value = context.portfolio.cash / (target_num - position_count)
        for stock in target_list:
            if context.portfolio.positions[stock].total_amount == 0:
                MA1 = get_bars(stock, count=5, unit='1d', fields=['close'],include_now=False)['close'].mean()
                MA2 = get_bars(stock, count=10 , unit='1d', fields=['close'],include_now=False)['close'].mean()
                MA3 = get_bars(stock, count=15 , unit='1d', fields=['close'],include_now=False)['close'].mean()
                now_price = get_bars(stock, 5, unit='1m',fields=['open','close'],include_now=False)['close'].mean()
                # 当前价站上相应平均线后，才进行买入
                if now_price > MA1 or now_price > MA2 or now_price > MA3: 
                    open_position(stock, value)
                    if g.printlog==True:#打印交易日志
                        thislog=pd.DataFrame({"代码":[stock],"g.today":[g.today],"方向":["买入"]})
                        g.tradelog=pd.concat([g.tradelog,thislog])
                    if len(context.portfolio.positions) == target_num:
                        break

#1-5 调整昨日涨停股票
def check_limit_up(context):
    now_time = context.current_dt
    if g.high_limit_list != []:
        #对昨日涨停股票观察到尾盘如不涨停则提前卖出，如果涨停即使不在应买入列表仍暂时持有
        for stock in g.high_limit_list:
            current_data = get_price(stock, end_date=now_time, frequency='1m', fields=['close','high_limit'], skip_paused=False, fq='pre', count=1, panel=False, fill_paused=True)
            if current_data.iloc[0,0] < current_data.iloc[0,1]:
                log.info("[%s]涨停打开，卖出" % (stock))
                position = context.portfolio.positions[stock]
                close_position(position)
                if g.printlog==True:#打印交易日志
                    price = position.price
                    avg_cost = position.avg_cost
                    print("price,avg_cost",price,avg_cost)
                    thislog=pd.DataFrame({"代码":[stock],"g.today":[g.today],"方向":["卖出(开板)"],"涨跌幅":[price/avg_cost-1]})
                    g.tradelog=pd.concat([g.tradelog,thislog])
            else:
                log.info("[%s]涨停，继续持有" % (stock))

#1-6 止盈止损
def stop_loss(context):
    if g.run_stoploss:
        current_positions = context.portfolio.positions
        if g.stoploss_strategy == 1 or g.stoploss_strategy == 3:
            for stock in current_positions.keys():
                price = current_positions[stock].price
                avg_cost = current_positions[stock].avg_cost
                # 个股盈利止盈
                if price >= avg_cost * 2:
                    if g.printlog==True:#打印交易日志
                        thislog=pd.DataFrame({"代码":[stock],"g.today":[g.today],"方向":["卖出(止盈)"],"涨跌幅":[price/avg_cost-1]})
                        g.tradelog=pd.concat([g.tradelog,thislog])
                    order_target_value(stock, 0)
                    log.debug("收益100%止盈,卖出{}".format(stock))
                # 个股止损
                elif price < avg_cost * (1 - g.stoploss_limit):
                    if g.printlog==True:#打印交易日志
                        thislog=pd.DataFrame({"代码":[stock],"g.today":[g.today],"方向":["卖出(止损)"],"涨跌幅":[price/avg_cost-1]})
                        g.tradelog=pd.concat([g.tradelog,thislog])
                    order_target_value(stock, 0)
                    log.debug("收益止损,卖出{}".format(stock))
                    g.stoploss_list.append(stock)
        if g.stoploss_strategy == 2 or g.stoploss_strategy == 3:
            stock_df = get_price(security=get_index_stocks('399101.XSHE')
                        ,end_date=context.previous_date, frequency='daily'
                        ,fields=['close', 'open'], count=1, panel=False)
            # 计算成分股平均涨跌，即指数涨跌幅
            down_ratio = (1 - stock_df['close'] / stock_df['open']).mean()
            # 市场大跌止损
            if down_ratio >= g.stoploss_market:
                g.stoploss_list.append(stock)
                log.debug("大盘惨跌,平均降幅{:.2%}".format(down_ratio))
                for stock in current_positions.keys():
                    order_target_value(stock, 0)

#2-1 过滤停牌股票
def filter_paused_stock(stock_list):
	current_data = get_current_data()
	return [stock for stock in stock_list if not current_data[stock].paused]

#2-2 过滤ST及其他具有退市标签的股票
def filter_st_stock(stock_list):
	current_data = get_current_data()
	return [stock for stock in stock_list
			if not current_data[stock].is_st
			and 'ST' not in current_data[stock].name
			and '*' not in current_data[stock].name
			and '退' not in current_data[stock].name]

#2-3 获取最近N个交易日内有涨停的股票
def get_recent_limit_up_stock(context, stock_list, recent_days):
    stat_date = context.previous_date
    new_list = []
    for stock in stock_list:
        df = get_price(stock, end_date=stat_date, frequency='daily', fields=['close','high_limit'], count=recent_days, panel=False, fill_paused=False)
        df = df[df['close'] == df['high_limit']]
        if len(df) > 0:
            new_list.append(stock)
    return new_list

#2-4 过滤涨停的股票
def filter_limitup_stock(context, stock_list):
	last_prices = history(1, unit='1m', field='close', security_list=stock_list)
	current_data = get_current_data()
	return [stock for stock in stock_list if stock in context.portfolio.positions.keys()
			or last_prices[stock][-1] < current_data[stock].high_limit]

#2-5 过滤跌停的股票
def filter_limitdown_stock(context, stock_list):
	last_prices = history(1, unit='1m', field='close', security_list=stock_list)
	current_data = get_current_data()
	return [stock for stock in stock_list if stock in context.portfolio.positions.keys()
			or last_prices[stock][-1] > current_data[stock].low_limit]

#2-6 过滤科创北交股票
def filter_kcbj_stock(stock_list):
    for stock in stock_list[:]:
        if stock[0] == '4' or stock[0] == '8' or stock[:2] == '68':
            stock_list.remove(stock)
    return stock_list

#2-7 过滤次新股
def filter_new_stock(context, stock_list, d):
    yesterday = context.previous_date
    return [stock for stock in stock_list if not yesterday - get_security_info(stock).start_date < datetime.timedelta(days=d)]

#2-8 判断今天是否跳过月份
def today_is_between(context):
    # 根据g.pass_month跳过指定月份
    month = context.current_dt.month
    # 判断当前月份是否在指定月份范围内【指定月份对较弱的行情进行过滤】
    if month in g.pass_months:
        code = '399303.XSHE'
        close = history(count = 3, unit='1d', field='close', security_list= [code], df = False, skip_paused = False, fq = 'none')[code]
        if close[-1] > close[-2] * 0.995 and close[-1] > close[-3] * 0.994:
            return True
        # 判断当前日期是否在指定日期范围内
        return False
    else:
        return True

#3-1 交易模块-自定义下单
def order_target_value_(security, value):
	if value == 0:
		log.debug("Selling out %s" % (security))
	else:
		log.debug("Order %s to value %f" % (security, value))
	return order_target_value(security, value)

#3-2 交易模块-开仓
def open_position(security, value):
	order = order_target_value_(security, value)
	if order != None and order.filled > 0:
		return True
	return False

#3-3 交易模块-平仓
def close_position(position):
	security = position.security
	order = order_target_value_(security, 0)  # 可能会因停牌失败
	if order != None:
		if order.status == OrderStatus.held and order.filled == order.amount:
			return True
	return False

#3-4 交易模块-调仓
def adjust_position(context, buy_stocks, stock_num):
	for stock in context.portfolio.positions:
		if stock not in buy_stocks:
			log.info("[%s]不在应买入列表中" % (stock))
			position = context.portfolio.positions[stock]
			close_position(position)
		else:
			log.info("[%s]已经持有无需重复买入" % (stock))
	position_count = len(context.portfolio.positions)
	if stock_num > position_count:
		value = context.portfolio.cash / (stock_num - position_count)
		for stock in buy_stocks:
			if context.portfolio.positions[stock].total_amount == 0:
				if open_position(stock, value):
					if len(context.portfolio.positions) == stock_num:
						break
