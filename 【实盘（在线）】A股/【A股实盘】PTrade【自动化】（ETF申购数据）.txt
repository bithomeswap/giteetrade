# 联系方式：lianghuajiaoyi123456
# 通过调整下面两个参数确定策略类型是可转债、中小板、微盘股g.Strategy、g.stocknum
import pandas as pd
import numpy as np
import time
import datetime
import math

###策略仿真启动大概需要提前五分钟【注意启动策略的时候保留好这个时间】###

#跨境ETF的申购赎回需要单独去营业部开权限

def symbol_convert(x):#股票代码加后缀
    if x.startswith("6"):
        return str(str(x)+".SS")
    elif x.startswith("00"):
        return str(str(x)+".SZ")
    elif x.startswith("30"):
        return str(str(x)+".SZ")
    else:
        pass
        
def filter_kcb_stock(stocks):#过滤科创北交股票
    for stock in stocks[:]:
        # 去掉科创北交的股票
        if stock[0]=="4" or stock[0]=="8" or stock[:2]=="68":
            stocks.remove(stock)
        # # 只要科创北交的股票
        # if stock[0]=="4" or stock[0]=="8" or stock[:2]=="68":
        #     pass
        # else:
        #     stocks.remove(stock)
    return stocks
    
#金额设置单股最大金额，持仓数根据当前金额调整，但是不低于多少
def initialize(context):
    set_benchmark("000905.SS")#设置基准收益【实盘应该是没用的】
    
    # #这种方式在盘前获取的数据不对
    # now=get_trading_day(0)#获取当前交易日（0日前交易日）
    # start_date=now.strftime("%Y-%m-%d")#测试当天的数据
    
    #下面的方式在盘前获取的数据正确
    now=context.blotter.current_dt
    start_date=now.strftime("%Y-%m-%d")
    
    print("******","start_date",start_date)
    last_date=(now-datetime.timedelta(days=250)).strftime("%Y-%m-%d")
    today=get_trade_days(end_date=start_date,count=2)[1]
    g.today=today.replace("-","")
    yesterday=get_trade_days(end_date=start_date,count=2)[0]
    g.yesterday=yesterday.replace("-","")
    print("******","g.today",g.today,type(g.today),"g.yesterday",g.yesterday)
    
    g.targetmoney=10000#单笔下单金额
    g.traderate=2#下单时对对手盘厚度的考量
    g.cancellorder=True#是否执行撤单
    
    #实盘数据
    run_daily(context, pretrade, time='9:05')#每日重新获取日期数据，避免日期不对
    run_daily(context, get_etf, time='9:10')#数据获取
    run_daily(context, post_etf, time='9:25')#将ETF数据post出去
    run_daily(context, get_etf, time='13:58')#数据获取
    # run_daily(context, trade_etf, time='10:00')#执行交易
    
import json
import pymysql#pip install pymysql
def post_etf(context):#链接失败
    # 配置参数
    HOST = 'mysql.sqlpub.com'#或者82.103.129.94【这个地址链接不到，域名可以连接到】
    PORT = 3306
    USER = 'bithome'
    PASSWORD = 'ethrazgCcSHkrsKE'
    DATABASE = 'bithome'
    connection = pymysql.connect(host=HOST, port=PORT, user=USER, password=PASSWORD, database=DATABASE,
                        charset='utf8', autocommit=True, cursorclass=pymysql.cursors.DictCursor)
    print("链接成功",connection)
    cursor=connection.cursor()#创建链接
    
    csvname="ETF"#表名称
    # SQL 查询，检查表是否存在
    sql_check_table = "SHOW TABLES LIKE '{}'".format(csvname)
    cursor.execute(sql_check_table)
    result = cursor.fetchone()
    if result:
        print(csvname,"表已存在,数据清空")
        # 如果表存在，清空表中的数据
        sql_truncate_table = "TRUNCATE TABLE {}".format(csvname)
        cursor.execute(sql_truncate_table)
        connection.commit()
        print(csvname,"表清空成功")
    else:
        print(csvname,"表不存在,正在创建")
        # 如果表不存在，创建表
        sql_create_table ="""
        CREATE TABLE {} (
            id INT AUTO_INCREMENT PRIMARY KEY,
            data VARCHAR(255) NOT NULL
        )
        """.format(csvname)
        cursor.execute(sql_create_table)
        connection.commit()
        print(csvname,"表创建成功")
        
    etfinfo=pd.read_csv("/home/fly/notebook/------etfinfo成分股"+".csv")
    df=pd.read_csv("/home/fly/notebook/---ETFdf"+".csv")
    
    # SQL 插入语句【多行数据转成json】# 将字典转换为 JSON 字符串
    data_to_insert = etfinfo.to_json()
    sql_insert = "INSERT INTO {} (data) VALUES (%s)".format(csvname)
    cursor.execute(sql_insert,data_to_insert)#插入单行数据
    data_to_insert = df.to_json()
    sql_insert = "INSERT INTO {} (data) VALUES (%s)".format(csvname)
    cursor.execute(sql_insert,data_to_insert)#插入单行数据

    pass
    
def pretrade(context):
    current_dt=context.blotter.current_dt
    log.info(str(current_dt)+"时分秒数据"+str(current_dt.time())+"小时"+str(current_dt.time().hour)+"分钟"+str(current_dt.time().minute))
    
    # #这种方式在盘前获取的数据不对
    # now=get_trading_day(0)#获取当前交易日（0日前交易日）
    # start_date=now.strftime("%Y-%m-%d")#测试当天的数据
    
    #下面的方式在盘前获取的数据正确
    now=context.blotter.current_dt
    start_date=now.strftime("%Y-%m-%d")
    
    print("******","start_date",start_date)
    last_date=(now-datetime.timedelta(days=250)).strftime("%Y-%m-%d")
    today=get_trade_days(end_date=start_date,count=2)[1]
    g.today=today.replace("-","")
    yesterday=get_trade_days(end_date=start_date,count=2)[0]
    g.yesterday=yesterday.replace("-","")
    print("******","g.today",g.today,type(g.today),"g.yesterday",g.yesterday)
    
def get_etf(context):
    current_dt=context.blotter.current_dt
    log.info(str(current_dt)+"时分秒数据"+str(current_dt.time())+"小时"+str(current_dt.time().hour)+"分钟"+str(current_dt.time().minute))
    
    #判断时间是否正确
    print(g.today,"g.today")
    
    etfs=get_etf_list()
    print(etfs)
    
    #获取申购详情
    infodf=get_etf_info(etfs)#仅仅支持交易模块使用
    infodf=pd.DataFrame(infodf).T
    infodf=infodf.reset_index()
    infodf=infodf.rename(columns={"index": "代码",
            "etf_redemption_code":"申赎代码",#申赎代码(str:str)；
            "report_unit":"最小申购、赎回单位",#最小申购、赎回单位(str:int)；最小申购赎回单位是指投资者进行ETF实物申购、赎回申报的基本单位
            "cash_balance":"现金差额",#现金差额(str:float)；现金差额如果正的你申购要多付钱，如果负的就是赎回需要多付钱
            "max_cash_ratio":"现金替代比例上限",#现金替代比例上限(str:float)；就是全仓申购需要支付的现金占总金额的比例（一般是要求实物申购为主，也就是成分股比例比较高）
            "pre_cash_componet":"T-1日申购基准单位现金余额",#T-1日申购基准单位现金余额(str:float)；
            "nav_percu":"T-1日申购基准单位净值",#T-1日申购基准单位净值(str:float)；理论上这个值应该是等于report_unit*nav_pre
            "nav_pre":"T-1日基金单位净值",#T-1日基金单位净值(str:float)；这个净值不适合用来做溢价率，不如实时净值IPOV比较准确，不过美股本身波动率不大所以有三个点溢价就足够cover各种极端情况了
            "allot_max":"申购上限",#申购上限(str:float)；一般有上限的溢价率更高
            "redeem_max":"赎回上限",#赎回上限(str:float)；一般有上限的折价率更高
            # 其他字段备注:
            # publish -- 是否需要发布IOPV，1是需要发布，0是不需要发布；
            # 返回如下:
            # {'510020.SS': {'nav_percu': 206601.39, 'redeem_max': 0.0, 'nav_pre': 0.207, 'report_unit': 1000000, 'max_cash_ratio': 0.4,
                            # 'cash_balance': -813.75, 'etf_redemption_code': '510021', 'pre_cash_componet': 598.39, 'allot_max': 0.0, 'publish': 1}}
            })
    print(infodf)
    etfs=infodf["代码"].tolist()
    print("执行已经申购的ETF的卖出任务")
    infodf.to_csv("/home/fly/notebook/---ETFinfodf"+".csv")
    #获取昨日价格【这里用的当天数据获取的preclose，实盘的时候如果拿不到就换成昨日数据的close】
    df=get_price(
        security=etfs,
        start_date=None,
        end_date=g.yesterday,#如果在开盘前拿当天的preclose，其实取得数据是再往前一天的
        frequency="1d",
        fields=["close","open"],# 获取全部数据列，其中昨日收盘价是用来计算总股本的
        # fq="pre",
        fq=None,# 这里需要用不复权的数据才是准确的
        count=1).to_frame()
    df=df.reset_index()
    df=df.rename(columns={"minor": "代码"})
    df=df[["代码","close"]]
    
    df=df.merge(infodf,on="代码")#info数据盘前好像是空值
    df.to_csv("/home/fly/notebook/---ETFdf"+".csv")
    df=df[df["T-1日基金单位净值"]>0]#有可以申购的余额
    # df["溢价率"]=df["preclose"]/df["T-1日基金单位净值"]-1
    df["溢价率"]=df["close"]/df["T-1日基金单位净值"]-1
    df=df[df["溢价率"]>0.05]#溢价率5%以上认为是高溢价ETF
    
    #生成需要处理的etf列表
    etfs=df["代码"].tolist()
    # #根据快照重新拼接市值【开盘之前（9点10分）这个快照是空值】
    # df=get_snapshot(etfs)
    # df=pd.DataFrame(df).T#在转置之前的列名是股票
    # df=df.reset_index()
    # df=df.rename(columns={"index":"代码",})
    # # print("快照数据",df)
    # # df["hsTimeStamp"]#这里其实就是前面的几位是年月日时分秒，后三位的毫秒级数据。反而不是传统意义上的时间戳数据。
    # df["当前时间"]=(datetime.datetime.utcnow()+datetime.timedelta(hours=8))
    # # df=df[~(df["trade_status"]=="STOPT")]#去掉停牌状态
    # df=df[(df["trade_status"]=="TRADE")]#只保留可交易状态
    # df.to_csv("/home/fly/notebook/快照数据.csv")
    # df=df[["代码",
           # "preclose_px",#前收价，如果是需要实时计算的话，则用快照价格和IOPV实时净值做对比
           # ]]
    # etfs=df["代码"].tolist()#过滤停牌ETF之后【不确定9.10分能不能拿到是否停牌的数据】
    # #生成成分股详情
    etfinfo=pd.DataFrame({})
    for thisetf in etfs:
        print("成分股获取ETF",thisetf)
        #ETF成分券列表，正常返回一个list类型字段，包含每只etf代码所对应的成分股。异常返回空list，如[](list[str,...])
        stock_list = get_etf_stock_list(thisetf)
        print("ETF成分券列表",stock_list)

        #ETF成分券信息【有一些境外ETF成分券没有代码，自动补充为.SZ.SH了，这样是不对的】
        stocks_info = get_etf_stock_info(thisetf,stock_list)#外盘ETF自动把后缀换成.SZ或者.SH了，所以有问题
        stocks_info = pd.DataFrame(stocks_info).T
        stocks_info = stocks_info.reset_index()
        stocks_info = stocks_info.rename(columns={"index": "代码",
                                                "code_num":"成分券数量",
                                                "cash_replace_flag":"现金替代标志",
                                                "replace_ratio":"保证金率",
                                                "replace_balance":"替代金额",
                                                "is_open":"停牌标志",
                                                })
        stocks_info['ETF代码'] = thisetf
        stocks_info['成分券列表'] = stocks_info.apply(lambda row: stock_list, axis=1)
        print("ETF成分券详情",stocks_info)
        etfinfo=pd.concat([etfinfo,stocks_info])
        etfinfo.to_csv("/home/fly/notebook/------etfinfo成分股"+".csv")
        
        # #ETF成分券篮子下单
        # stock_info = {'600000.SS':{'cash_replace_flag':1,'position_replace_flag':1,'limit_price':12}}
        # thisorder=etf_basket_order('510050.SS' ,1, price_style='S2',position=False, info=stock_info)
        # print("ETF成分券篮子下单",thisorder)

        # #ETF申赎接口
        # #ETF申购
        # etf_purchase_redemption('510050.SS',900000)
        # #ETF赎回
        # etf_purchase_redemption('510050.SS',-900000,limit_price = 2.9995)
    print("etfinfo",etfinfo)
    etfinfo.to_csv("/home/fly/notebook/------etfinfo成分股"+".csv")
    
    
    #原始etf处理
    df=df[df["申购上限"]>0]#有可以申购的余额
    df=df[df["现金替代比例上限"]>0]#只申购现金替代比例为1的（一般是固收类、外盘类和部分特殊ETF），如果没申购赎回限额的一般没溢价折价
    print(df)
    df.to_csv("/home/fly/notebook/---ETF高溢价"+".csv")

def trade_etf(context):#未完成
    df=pd.read_csv("/home/fly/notebook/---ETF高溢价"+".csv")    
    if len(df)>0:
        df=df.sort_values(by='溢价率',ascending=False)#从大到小排序
        # 得到当前资金余额
        cash=context.portfolio.cash
        # # 当前持有的标的和现金的总价值
        # portfolio_value=context.portfolio.portfolio_value
        for etf in df["代码"].tolist():#这里应该把代码换成申赎代码
            thisdf=df[df["代码"]==etf]
            print("当前处理ETF",etf)
            #计算申购金额
            preetfmoney=thisdf["T-1日申购基准单位现金余额"].values[0]#一个申购赎回单位代表的金额
            maxbuymount=thisdf["申购上限"].values[0]
            minbuymount=thisdf["最小申购、赎回单位"].values[0]
            print("每个单位申购金额",preetfmoney,"最大申购数量",maxbuymount,"最小申购数量",minbuymount)
            if cash>preetfmoney:
                print("余额足够申购一个最小单位执行申购")
                thismount=math.floor(cash/preetfmoney)*minbuymount
                print("最佳申购数量",thismount)
                if thismount>=maxbuymount:#超过最大余额了
                    thismount=maxbuymount
                else:
                    pass
                # ETF申购
                etf_purchase_redemption(etf_code=etf,
                                        amount=thismount,#基金申购数量（正值为申购，负值为赎回）
                                        limit_price=None,
                                        )
                # #ETF赎回
                # etf_purchase_redemption(etf_code='510050.SS',
                                        # amount=-900000,
                                        # limit_price = 2.9995
                                        # )
                cash-=thismount*(preetfmoney/minbuymount)#减去已申购金额
            else:
                print("剩余金额不足中断任务")
                break
    
    current_dt=context.blotter.current_dt
    log.info(str(current_dt)+"时分秒数据"+str(current_dt.time())+"小时"+str(current_dt.time().hour)+"分钟"+str(current_dt.time().minute))
    print("执行已经申购的ETF的卖出任务")
    
    #初始化存储已经撤销订单的列表【只初始化一次，不要重置】
    g.dfordercancelled=pd.DataFrame({})
    ordernum=0#交易轮次计数，避免频繁撤单
    while True:
        ordernum+=1#交易轮次计数，避免频繁撤单
        print("是否执行订单管理",g.cancellorder)
        if ordernum>1:
            print("从第二轮开始每执行一轮休息5秒避免订单过度冲击市场","当前轮次",ordernum)
            time.sleep(5)#休息一秒，避免空转
        if ordernum%10==0:
            print("交易轮次达标，执行撤单任务")
            if g.cancellorder:#执行订单管理功能的话则后面代码才起作用
                g.dforderalls=pd.DataFrame({})#初始化存储全部订单的列表【每一轮都可以重置】
                ##该接口用于获取当日该账户内所有订单，或按条件获取指定订单。
                todayorders=get_all_orders()#get_orders是只获取当前策略的订单
                print("todayorders",todayorders,type(todayorders))
                if len(todayorders)>0:
                    print("当日存在已经委托的订单需要进行撤单计算")
                    g.dforderalls=pd.DataFrame(todayorders)
                    print("g.dforderalls",g.dforderalls,type(g.dforderalls))
                    g.dforderalls=g.dforderalls.rename(columns={"symbol":"代码",
                                                            "price":"委托价格",
                                                            "amount":"委托数量",
                                                            "filled_amount":"已成交数量",
                                                            "entrust_no":"委托编号",
                                                            "entrust_bs":"委托方向",
                                                            # "status":"订单状态",#这里需要注销不然后续的代码还得改否则就报错了
                                                            })
                    # {'price': 29.42,#价格
                    # 'entrust_no': 460,
                    # 'status': '2',#订单状态(str)，该字段取值范围：
                        # '0' -- "未报"
                        # '1' -- "待报"
                        # '2' -- "已报"
                        # '3' -- "已报待撤"
                        # '4' -- "部成待撤"
                        # '5' -- "部撤"
                        # '6' -- "已撤"
                        # '7' -- "部成"
                        # '8' -- "已成"
                        # '9' -- "废单"
                        # '+' -- "已受理"
                        # '-' -- "已确认"
                        # 'V' -- "已确认"
                    # 'symbol': '301588.SZ',标的代码(备注：标的代码尾缀为四位，上证为XSHG，深圳为XSHE，如需对应到代码请做代码尾缀兼容)
                    # 'filled_amount': 0,#成交数量，买入时为正数，卖出时为负数
                    # 'entrust_bs': 2,#委托编号
                    # 'amount': -500}#下单数量，买入是正数，卖出是负数
                    g.dfordercancelled.to_csv("/home/fly/notebook/---g.dfordercancelled"+".csv")
                    g.dforderalls.to_csv("/home/fly/notebook/---g.dforderalls"+".csv")
                    #订单处理
                    for index,thisorder in g.dforderalls.iterrows():
                        orderid=thisorder["委托编号"]
                        ordersymbol=thisorder["代码"]#标的代码
                        orderprice=thisorder["委托价格"]
                        orderamount=thisorder["委托数量"]
                        orderfilled_amount=thisorder["已成交数量"]
                        if ordersymbol in df["代码"].tolist():
                            print("撤单确认",ordersymbol)#这个就是字符串下面应该的是对的
                            if thisorder["status"] in ["2","7"]:#针对已报2、部成7进行撤单
                                print(ordersymbol,"只针对已报或者部成订单进行撤单，状态",thisorder["status"])
                                if (orderfilled_amount==0):
                                    print(ordersymbol,"订单未成交")
                                    cancelinfo=cancel_order_ex(orderid)
                                    print("撤单详情",cancelinfo)
                                elif((orderamount-orderfilled_amount)*orderprice>g.targetmoney):
                                    print(ordersymbol,"订单部分成交但剩余金额大于g.targetmoney")
                                    cancelinfo=cancel_order_ex(orderid)
                                    print("撤单详情",cancelinfo)
                else:
                    print("当日尚且没有任何订单，无需进行撤单计算")

        print("选股前先获取持仓信息",current_dt.time())
        #交易开始之前输出持仓
        positions=context.portfolio.positions
        # positions=get_positions()
        g.dfposition=pd.DataFrame({})
        for position in positions.values():
            if position.amount>0:#只拼接总余额大于0的持仓
                thisposition=pd.DataFrame({
                            "代码":[position.sid],
                            "余额":[position.amount],
                            "可用余额":[position.enable_amount],
                            "当前价":[position.last_sale_price],
                            "成本价":[position.cost_basis],
                            "类型":[position.business_type],
                            })
                thisposition["日期"]=g.today
                thisposition["持仓市值"]=thisposition["余额"]*thisposition["当前价"]
                thisposition["可用资金"]=context.portfolio.cash
                thisposition["总资产"]=context.portfolio.portfolio_value
                g.dfposition=pd.concat([g.dfposition,thisposition])
        if not g.dfposition.empty:#持仓不为空值
            g.dfposition["总持仓市值"]=g.dfposition["持仓市值"].sum()
        # print("当前持仓状态",g.dfposition)
        g.dfposition.to_csv("/home/fly/notebook/---g.dfposition"+".csv")
        

        if not g.dfposition.empty:#持仓不为空值
            for stock in g.dfposition["代码"].tolist():
                if stock in df["代码"].tolist():#属于当日认购的ETF的一种
                    print("当前处理ETF",stock)
                    thispostion=context.portfolio.positions[stock]
                    thismount=thispostion.amount
                    thisenable_amount=thispostion.enable_amount#计算卖出订单用这个可用余额
                    print("当前持仓",thispostion,"总共余额",thismount,"可用余额",thisenable_amount)
                    if thisenable_amount>0:
                        print("可用余额大于0，执行卖出",stock)
                        stock_trade_status=get_snapshot(stock)[stock]["trade_status"]
                        print("stock_trade_status",stock_trade_status,type(stock_trade_status))
                        if (stock_trade_status!="STOPT"):#仅仅保留未停牌状态的标的【状态是START的时候也不能交易】                    
                        # if (stock_trade_status=="TRADE"):#仅仅保留处于连续竞价状态的标的
                            print(stock,"未停牌，可以执行交易")
                            log.info("卖出的股票名称：%s"% get_stock_name(stock))
                            # 获取买卖价格范围，【一分钱价差】或者【0.005滑点+一分钱】的最大值
                            tick=get_snapshot(stock)
                            current_price=tick[stock]["last_px"]
                            high_limit=tick[stock]["up_px"]
                            low_limit=tick[stock]["down_px"]
                            ask_price_1=tick[stock]["offer_grp"][1][0]
                            ask_volume_1=tick[stock]["offer_grp"][1][1]
                            bid_price_1=tick[stock]["bid_grp"][1][0]
                            bid_volume_1=tick[stock]["bid_grp"][1][1]
                            # print(tick[stock],tick[stock]["offer_grp"],tick[stock]["bid_grp"],"ask_price_1",ask_price_1,"ask_volume_1",ask_volume_1,"bid_price_1",bid_price_1,"bid_volume_1",bid_volume_1,)
                            
                            
                            #********
                            #********
                            if (ask_price_1-bid_price_1)<=(((ask_price_1+bid_price_1)/2)*g.bidrate):#这里的滑点比例仅仅用来过滤盘口滑点
                                print("盘口价差符合要求",g.bidrate,"ask_price_1",ask_price_1,"bid_price_1",bid_price_1)
                                #滑点小的时候固定对手价一档下单
                                buy_limit=ask_price_1
                                sell_limit=bid_price_1
                            # else:
                                # #滑点大的时候按照固定滑点比例在己方一档和对手方一档之间接单【这个等金额大了涉及撤单才有用】
                                # buy_limit=min(round((bid_price_1+0.01),2),high_limit)
                                # sell_limit=max(round((sell_limit-0.01),2),low_limit)
                            #********
                            #********
                                if ((stock.startswith("12")) or (stock.startswith("11"))):
                                    #可转债10股一手
                                    if (thisenable_amount*sell_limit)<(g.traderate*g.targetmoney):#剩余应卖出金额小于g.traderate倍的g.targetmoney以下
                                        log.info("卖出的股票名称：%s"% get_stock_name(stock),"全部卖出",thisenable_amount)
                                        # 计算应下单金额
                                        sellvolume=thisenable_amount
                                        order_id=order(stock,-sellvolume,limit_price=sell_limit)#限价单，sell_limit是计算后的卖价，current_price实时价格也可以
                                        # order_id=order_market(stock,-sellvolume,0,limit_price=sell_limit) #市价单对手方最优；
                                        # order_id=order_market(stock,-sellvolume,4,limit_price=sell_limit) #市价单委托，最优五档即时成交剩余撤销；
                                        log.info("[%s]卖出股票" % stock)
                                        log.info("[%s]卖出订单" % order_id)
                                    else:
                                        log.info("卖出的股票名称：%s"% get_stock_name(stock),"限额卖出",g.targetmoney)
                                        # 计算应下单金额
                                        sellvolume=(math.floor((g.targetmoney/current_price)/10)*10)
                                        order_id=order(stock,-sellvolume,limit_price=sell_limit)#限价单，sell_limit是计算后的卖价，current_price实时价格也可以
                                        # order_id=order_market(stock,-sellvolume,0,limit_price=sell_limit) #市价单对手方最优；
                                        # order_id=order_market(stock,-sellvolume,4,limit_price=sell_limit) #市价单委托，最优五档即时成交剩余撤销；
                                        log.info("[%s]卖出股票" % stock)
                                        log.info("[%s]卖出订单" % order_id)
                                else:
                                    if (bid_price_1*bid_volume_1)>g.targetmoney:
                                        print("对手盘买单一档足够下g.targetmoney的卖出订单，仅对非可转债标的进行验证")
                                        #非可转债都是100股一手
                                        if (thisenable_amount*sell_limit)<(g.traderate*g.targetmoney):#剩余应卖出金额小于g.traderate倍的g.targetmoney以下
                                            log.info("卖出的股票名称：%s"% get_stock_name(stock),"全部卖出",thisenable_amount)
                                            # 计算应下单金额
                                            sellvolume=thisenable_amount
                                            order_id=order(stock,-sellvolume,limit_price=sell_limit)#限价单，sell_limit是计算后的卖价，current_price实时价格也可以
                                            # order_id=order_market(stock,-sellvolume,0,limit_price=sell_limit) #市价单对手方最优；
                                            # order_id=order_market(stock,-sellvolume,4,limit_price=sell_limit) #市价单委托，最优五档即时成交剩余撤销；
                                            log.info("[%s]卖出股票" % stock)
                                            log.info("[%s]卖出订单" % order_id)
                                        else:
                                            log.info("卖出的股票名称：%s"% get_stock_name(stock),"限额卖出",g.targetmoney)
                                            # 计算应下单金额
                                            sellvolume=(math.floor((g.targetmoney/current_price)/100)*100)
                                            order_id=order(stock,-sellvolume,limit_price=sell_limit)#限价单，sell_limit是计算后的卖价，current_price实时价格也可以
                                            # order_id=order_market(stock,-sellvolume,0,limit_price=sell_limit) #市价单对手方最优；
                                            # order_id=order_market(stock,-sellvolume,4,limit_price=sell_limit) #市价单委托，最优五档即时成交剩余撤销；
                                            log.info("[%s]卖出股票" % stock)
                                            log.info("[%s]卖出订单" % order_id)
            log.info("卖出订单已全部委托")            
        #到收盘时间停止
        thisnow=(datetime.datetime.utcnow()+datetime.timedelta(hours=8)).time()#获取标准时间，换算成东八区
        print("当前小时分钟数",thisnow,"如果卡在这里了说明未到开盘时间或者同花顺可能修改时区了")
        if (thisnow>datetime.time(14,55)):#【收盘一段时间之后才打断任务，避免任务中途重新启动】
            print("已到收盘时间任务结束",thisnow)
            break