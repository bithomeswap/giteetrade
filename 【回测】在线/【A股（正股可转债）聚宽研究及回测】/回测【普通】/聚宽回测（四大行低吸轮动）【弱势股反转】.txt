#本策略是对中、农、工、商四大银行的股票进行分析，
#对比各品种日内分钟线上收盘价相对于昨日收盘价的涨跌情况，
#进行纯多头配对轮询策略，只买进低涨幅或高跌幅的股票，
#而无做空的行为，即只执行统计套利中的做多部分。
# https://www.joinquant.com/post/46954
#换成市净率轮动的话不如我大市值策略，看来核心逻辑是国家队救市
# 初始化参数
def initialize(context):
    # 初始化此策略
    # 设置要操作的股票池为空，每天需要不停变化股票池
    set_universe([])
    set_option('use_real_price', True)
    # 打开防未来函数
    set_option("avoid_future_data", True)
    #设置手续费
    set_order_cost(OrderCost(open_commission=0.0002, close_commission=0.00122, min_commission=5),type='stock') 
    #滑点设置为0
    set_slippage(FixedSlippage(0.003))#百三滑点直接归零，千三滑点收益曲线不错，默认滑点略微盈利
    set_option('order_volume_ratio', 0.25)
    # 设置银行股票 工行，建行
    g.bank_stocks = ['601398.XSHG', '601288.XSHG','601939.XSHG','601988.XSHG']  
    # 设置基准对比为沪深300指数
    g.inter = 0.005
# 每天交易前调用
def before_trading_start(context):
    # 获取四大行前一日的收盘价，以字典形式存储
    g.df_last = history(1, unit='1d', field='close', security_list=g.bank_stocks, df=False, skip_paused=True, fq='pre')
    log.error('df_last:', g.df_last)
# 每个单位时间(如果按天回测,则每天调用一次,如果按分钟,则每分钟调用一次)调用一次
def handle_data(context, data):
    raito = []
    # 求四大行最新涨幅
    for code in g.bank_stocks:
        raito.append((data[code].close - 0.01) / g.df_last[code][-1] )
    # log.error('rate:', raito)
    # 在未持仓的情况下    
    if len(context.portfolio.positions) == 0:
        # 最大涨幅与最小涨幅之差大于A
        if max(raito) - min(raito) > g.inter:
            # 获取最小涨幅的股票并买入
            min_index = raito.index(min(raito))
            log.info(f"选择 {min_index}")
            order_value(g.bank_stocks[min_index], context.portfolio.total_value)
    else:
        # 获取现持仓的股票代码
        code = list(context.portfolio.positions)[0]
        hold = context.portfolio.positions[code]
        if hold.closeable_amount <= 0:
            return
        # 获取持仓股票在bank_stocks列表中的索引位置
        index = g.bank_stocks.index(code)
        # 持仓股票涨幅与最小涨幅之差大于A
        if raito[index] - min(raito) > g.inter:
            order_target(code, 0)
            min_index = raito.index(min(raito))
            log.info(f"选择 {min_index}")
            order_value(g.bank_stocks[min_index], context.portfolio.total_value)