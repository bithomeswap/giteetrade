# 克隆自聚宽文章：https://www.joinquant.com/post/39960
# 标题：“7年40倍”策略扩容到50只
# 作者：wywy1995

from jqdata import *
import math
import pandas as pd

def initialize(context):
    # 设定基准
    set_benchmark('000905.XSHG')
    # 用真实价格交易
    set_option('use_real_price', True)
    # 打开防未来函数
    set_option("avoid_future_data", True)
    # 设置滑点为理想情况，不同滑点影响可以在归因分析中查看
    set_slippage(PriceRelatedSlippage(0.000))
    # 设置交易成本
    set_order_cost(OrderCost(open_tax=0, close_tax=0.001, open_commission=0.0003, close_commission=0.0003, close_today_commission=0, min_commission=5),type='fund')
    # 除非需要精简信息，否则不要过滤日志，方便debug
    #log.set_level('system', 'error')
    #初始化全局变量
    g.stock_num = 50
    g.limit_up_list = []
    g.hold_list = []
    g.weights = [1.0, 1.0, 1.6, 0.8, 2.0]
    # 设置交易时间，每天运行
    run_daily(prepare_stock_list, time='9:05', reference_security='000300.XSHG')
    run_weekly(weekly_adjustment, weekday=1, time='9:30', reference_security='000300.XSHG')
    #run_weekly(weekly_adjustment, weekday=3, time='9:30', reference_security='000300.XSHG')
    #run_daily(check_std, time='09:30')
    run_daily(check_limit_up, time='14:00', reference_security='000300.XSHG')
    #run_daily(check_junxian, time = '14:55')
    run_daily(print_position_info, time='15:10', reference_security='000300.XSHG')
    
#1-1 准备股票池
def prepare_stock_list(context):
    #获取已持有列表
    g.hold_list= []
    for position in list(context.portfolio.positions.values()):
        stock = position.security
        g.hold_list.append(stock)
    #获取昨日涨停列表
    if g.hold_list != []:
        df = get_price(g.hold_list, end_date=context.previous_date, frequency='daily', fields=['close','high_limit'], count=1, panel=False, fill_paused=False)
        df = df[df['close'] == df['high_limit']]
        g.high_limit_list = list(df.code)
    else:
        g.high_limit_list = []    


#1-2 选股模块
def get_stock_list(context):
    # 获取前N个单位时间当时的收盘价
    def get_close(stock, n, unit):
        return attribute_history(stock, n, unit, 'close')['close'][0]
    # 获取现价相对N个单位前价格的涨幅
    def get_return(stock, n, unit):
        price_before = attribute_history(stock, n, unit, 'close')['close'][0]
        price_now = get_close(stock, 1, '1m')
        if not isnan(price_now) and not isnan(price_before) and price_before != 0:
            return price_now / price_before
        else:
            return 100
    
    # 获得初始列表
    yesterday = context.previous_date
    initial_list = get_all_securities('stock', yesterday).index.tolist()
    initial_list = filter_kcbj_stock(initial_list)
    initial_list = filter_new_stock(context, initial_list, 375)
    initial_list = filter_st_stock(initial_list)
    q = query(
        valuation.code, valuation.market_cap, valuation.circulating_market_cap
    ).filter(
        valuation.code.in_(initial_list),
        valuation.pb_ratio > 0,
        indicator.inc_return > 0,
        indicator.inc_total_revenue_year_on_year > 0,
        indicator.inc_net_profit_year_on_year > 0
    ).order_by(
        valuation.market_cap.asc()).limit(100)
    df = get_fundamentals(q, date=yesterday)
    df.index = df.code
    initial_list = list(df.index)
    
    zt_count = get_hl_count_df(initial_list, yesterday, 250)
    initial_list = list(zt_count[zt_count['count'] > 0].index)
    '''
    #如果价格低于5 10 20 60 120最低价 且5 10 20 60 std大于1 remove
    for s in initial_list:
        s_preclose = get_close(s, 1, '1d')
        mean_5 = get_mean_price(s, yesterday, 5)
        mean_10 = get_mean_price(s, yesterday, 10)
        mean_20 = get_mean_price(s, yesterday, 20)
        mean_60 = get_mean_price(s, yesterday, 60)
        mean_120 = get_mean_price(s, yesterday, 120)
        temp = [mean_5, mean_10, mean_20, mean_60]
        #if np.std(temp) > 0.9 and s_preclose < min(mean_120, min(temp)):
        #log.info('第一次', s, np.std(temp))
        if np.std(temp) < 0.5:
            #log.info(s)
            initial_list2.append(s)
    '''
    
    '''
    df250 = get_price(initial_list, end_date = yesterday, frequency='daily', fields=['close'], count=250, panel=False, fill_paused=True)
    p_mean_min = df250.groupby('code').apply(lambda df250: min(df250['close'][-5:].sum()/5, df250['close'][-10:].sum()/10, df250['close'][-20:].sum()/20, df250['close'][-60:].sum()/60, df250['close'][-120:].sum()/120, df250['close'][:].sum()/250))
    p_close = df250.groupby('code').apply(lambda df250:df250['close'].iloc[-1])
    stock_mean = p_close[p_close.gt(p_mean_min)].index.tolist()
    initial_list = stock_mean
    '''
    '''
    #均线过滤
    df250 = get_price(initial_list, end_date = yesterday, frequency='daily', fields=['close'], count=250, panel=False, fill_paused=True)
    p_mean5 = df250.groupby('code').apply(lambda df250: df250['close'][-5:].sum()/5)
    p_mean10 = df250.groupby('code').apply(lambda df250: df250['close'][-10:].sum()/10)
    p_mean20 = df250.groupby('code').apply(lambda df250: df250['close'][-20:].sum()/20)
    p_close = df250.groupby('code').apply(lambda df250:df250['close'].iloc[-1])
    stock_mean = p_close[p_close.gt(p_mean5)].index.tolist()
    #stock_mean10 = p_mean5[p_mean5.gt(p_mean10)].index.tolist()
    #stock_mean20 = p_mean10[p_mean10.gt(p_mean20)].index.tolist()
    initial_list = stock_mean
    '''
    
    #获取原始值
    MC, CMC, PN, TV, RE = [], [], [], [], []
    if len(initial_list) > 0:
        for stock in initial_list:
            #总市值
            mc = df.loc[stock]['market_cap']
            MC.append(mc)
            #流通市值
            cmc = df.loc[stock]['circulating_market_cap']
            CMC.append(cmc)
            #当前价格
            pricenow = get_close(stock, 1, '1m')
            PN.append(pricenow)
            #5日累计成交量
            total_volume_n = attribute_history(stock, 1200, '1m', 'volume')['volume'].sum()
            TV.append(total_volume_n)
            #60日涨幅
            m_days_return = get_return(stock, 60, '1d') 
            RE.append(m_days_return)
        #合并数据
        df = pd.DataFrame(index=initial_list,
        columns=['market_cap','circulating_market_cap','price_now','total_volume_n','m_days_return'])
        df['market_cap'] = MC
        df['circulating_market_cap'] = CMC
        df['price_now'] = PN
        df['total_volume_n'] = TV
        df['m_days_return'] = RE
        df = df.dropna()
        min0, min1, min2, min3, min4 = min(MC), min(CMC), min(PN), min(TV), min(RE)
        #min0, min1, min2, min3 = min(MC), min(CMC), min(PN), min(TV)
        #计算合成因子
        temp_list = []
        for i in range(len(list(df.index))):
            #score = g.weights[0] * math.log(min0 / df.iloc[i,0]) + g.weights[1] * math.log(min1 / df.iloc[i,1]) + g.weights[2] * math.log(min2 / df.iloc[i,2]) + g.weights[3] * math.log(min3 / df.iloc[i,3]) + g.weights[4] * math.log(min4 / df.iloc[i,4])
            score = g.weights[0] * math.log(min0 / df.iloc[i,0]) + g.weights[1] * math.log(min1 / df.iloc[i,1]) + g.weights[2] * math.log(min2 / df.iloc[i,2]) + g.weights[3] * math.log(min3 / df.iloc[i,3])
            temp_list.append(score)
        df['score'] = temp_list
    
        #排序并返回最终选股列表
        df = df.sort_values(by='score', ascending=False)
        final_list = list(df.index)
    
    else:
        final_list = []
        
    return final_list


#1-4 整体调整持仓
def weekly_adjustment(context):
    #获取应买入列表
    target_list = get_stock_list(context)
    target_list = filter_paused_stock(target_list)
    target_list = filter_limitup_stock(context, target_list)
    target_list = filter_limitdown_stock(context, target_list)
    #截取不超过最大持仓数的股票量
    target_list = target_list[:min(g.stock_num, len(target_list))]
    #调仓卖出
    for stock in g.hold_list:
        if (stock not in target_list) and (stock not in g.high_limit_list):
            log.info("卖出[%s]" % (stock))
            position = context.portfolio.positions[stock]
            close_position(position)
        else:
            log.info("已持有[%s]" % (stock))
    #调仓买入
    position_count = len(context.portfolio.positions)
    target_num = len(target_list)
    if target_num > position_count:
        value = context.portfolio.cash / (target_num - position_count)
        for stock in target_list:
            if context.portfolio.positions[stock].total_amount == 0:
                if open_position(stock, value):
                    if len(context.portfolio.positions) == target_num:
                        break

#1-5 调整昨日涨停股票
def check_limit_up(context):
    now_time = context.current_dt
    if g.high_limit_list != []:
        #对昨日涨停股票观察到尾盘如不涨停则提前卖出，如果涨停即使不在应买入列表仍暂时持有
        for stock in g.high_limit_list:
            current_data = get_price(stock, end_date=now_time, frequency='1m', fields=['close','high_limit'], skip_paused=False, fq='pre', count=1, panel=False, fill_paused=True)
            if current_data.iloc[0,0] < current_data.iloc[0,1]:
                log.info("[%s]涨停打开，卖出" % (stock))
                position = context.portfolio.positions[stock]
                close_position(position)
            else:
                log.info("[%s]涨停，继续持有" % (stock))

# 计算涨停数
def get_hl_count_df(hl_list, date, watch_days):
    # 获取watch_days的数据
    df = get_price(hl_list, end_date=date, frequency='daily', fields=['low','close','high_limit','high'], count=watch_days, panel=False, fill_paused=False, skip_paused=False)
    df.index = df.code
    #计算涨停与一字涨停数，一字涨停定义为最低价等于涨停价
    hl_count_list = []
    extreme_hl_count_list = []
    #zb_count_list = []
    for stock in hl_list:
        df_sub = df.loc[stock]
        hl_days = df_sub[df_sub.close==df_sub.high_limit].high_limit.count()
        extreme_hl_days = df_sub[df_sub.low==df_sub.high_limit].high_limit.count()
        #zb_days = df_sub[df_sub.close<df_sub.high_limit & df.sub.high == df_sub.high_limit].high_limit.count()
        hl_count_list.append(hl_days)
        extreme_hl_count_list.append(extreme_hl_days)
        #zb_count_list.append(zb_days)
    #创建df记录
    df = pd.DataFrame(index=hl_list, data={'count':hl_count_list, 'extreme_count':extreme_hl_count_list})
    return df


def check_junxian(context):
    now_time = context.current_dt
    yesterday = context.previous_date
    if g.hold_list != []:
        df250 = get_price(g.hold_list, end_date = yesterday, frequency='daily', fields=['close'], count=250, panel=False, fill_paused=True)
        p_mean_min = df250.groupby('code').apply(lambda df250: min(df250['close'][-5:].sum()/5, df250['close'][-10:].sum()/10, df250['close'][-20:].sum()/20, df250['close'][-60:].sum()/60, df250['close'][-120:].sum()/120))
        p_close = df250.groupby('code').apply(lambda df250:df250['close'].iloc[-1])
        qc_list = p_close[p_close.lt(p_mean_min)].index.tolist()
        #对于持仓的标的 如果昨日收盘价小于5、10、20、60、120、250均线的最低值 卖出
        for stock in qc_list:
            log.info("[%s]破均线最低值，卖出" % (stock))
            position = context.portfolio.positions[stock]
            close_position(position)


def check_std(context):
    now_time = context.current_dt
    yesterday = context.previous_date
    close_list = []
    if g.hold_list != []:
        df250 = get_price(g.hold_list, end_date = yesterday, frequency='daily', fields=['close'], count=250, panel=False, fill_paused=True)
        p_mean_min = df250.groupby('code').apply(lambda df250: min(df250['close'][-5:].sum()/5, df250['close'][-10:].sum()/10, df250['close'][-20:].sum()/20, df250['close'][-60:].sum()/60, df250['close'][-120:].sum()/120))
        p_close = df250.groupby('code').apply(lambda df250:df250['close'].iloc[-1])
        qc_list = p_close[p_close.lt(p_mean_min)].index.tolist()
        
        for s in qc_list:
            mean_5 = get_mean_price(s, yesterday, 5)
            mean_10 = get_mean_price(s, yesterday, 10)
            mean_20 = get_mean_price(s, yesterday, 20)
            mean_60 = get_mean_price(s, yesterday, 60)
            temp = [mean_5, mean_10, mean_20, mean_60]
            if np.std(temp) > 0.5:
                close_list.append(s)

        #对于持仓的标的 如果5 10 20 60均线标准差大于0.5 且收盘价小于5 10 20 60 120均线的min 卖出
        for stock in close_list:
            log.info("[%s]均线标准差值异常，卖出" % (stock))
            position = context.portfolio.positions[stock]
            close_position(position)
 
#2-1 过滤停牌股票
def filter_paused_stock(stock_list):
	current_data = get_current_data()
	return [stock for stock in stock_list if not current_data[stock].paused]

#2-2 过滤ST及其他具有退市标签的股票
def filter_st_stock(stock_list):
	current_data = get_current_data()
	return [stock for stock in stock_list
			if not current_data[stock].is_st
			and 'ST' not in current_data[stock].name
			and '*' not in current_data[stock].name
			and '退' not in current_data[stock].name]

#2-3 获取最近N个交易日内有涨停的股票
def get_recent_limit_up_stock(context, stock_list, recent_days):
    stat_date = context.previous_date
    new_list = []
    for stock in stock_list:
        df = get_price(stock, end_date=stat_date, frequency='daily', fields=['close','high_limit'], count=recent_days, panel=False, fill_paused=False)
        df = df[df['close'] == df['high_limit']]
        if len(df) > 0:
            new_list.append(stock)
    return new_list

#2-4 过滤涨停的股票
def filter_limitup_stock(context, stock_list):
	last_prices = history(1, unit='1m', field='close', security_list=stock_list)
	current_data = get_current_data()
	return [stock for stock in stock_list if stock in context.portfolio.positions.keys()
			or last_prices[stock][-1] < current_data[stock].high_limit]

#2-5 过滤跌停的股票
def filter_limitdown_stock(context, stock_list):
	last_prices = history(1, unit='1m', field='close', security_list=stock_list)
	current_data = get_current_data()
	return [stock for stock in stock_list if stock in context.portfolio.positions.keys()
			or last_prices[stock][-1] > current_data[stock].low_limit]

#2-6 过滤科创北交股票
def filter_kcbj_stock(stock_list):
    for stock in stock_list[:]:
        if stock[0] == '4' or stock[0] == '8' or stock[:2] == '68':
            stock_list.remove(stock)
    return stock_list

#2-7 过滤次新股
def filter_new_stock(context, stock_list, d):
    yesterday = context.previous_date
    return [stock for stock in stock_list if not yesterday - get_security_info(stock).start_date < datetime.timedelta(days=d)]

#获得某天前几日的均价
def get_mean_price(stock, date, watchdays):
    return get_price(stock, end_date = date, frequency='daily', fields=['close'], count=watchdays, panel=False, fill_paused=False, skip_paused=True)['close'].mean() 


#3-1 交易模块-自定义下单
def order_target_value_(security, value):
	if value == 0:
		log.debug("Selling out %s" % (security))
	else:
		log.debug("Order %s to value %f" % (security, value))
	return order_target_value(security, value)

#3-2 交易模块-开仓
def open_position(security, value):
	order = order_target_value_(security, value)
	if order != None and order.filled > 0:
		return True
	return False

#3-3 交易模块-平仓
def close_position(position):
	security = position.security
	order = order_target_value_(security, 0)  # 可能会因停牌失败
	if order != None:
		if order.status == OrderStatus.held and order.filled == order.amount:
			return True
	return False

#3-4 交易模块-调仓
def adjust_position(context, buy_stocks, stock_num):
	for stock in context.portfolio.positions:
		if stock not in buy_stocks:
			log.info("[%s]不在应买入列表中" % (stock))
			position = context.portfolio.positions[stock]
			close_position(position)
		else:
			log.info("[%s]已经持有无需重复买入" % (stock))

	position_count = len(context.portfolio.positions)
	if stock_num > position_count:
		value = context.portfolio.cash / (stock_num - position_count)
		for stock in buy_stocks:
			if context.portfolio.positions[stock].total_amount == 0:
				if open_position(stock, value):
					if len(context.portfolio.positions) == stock_num:
						break



#4-1 打印每日持仓信息
def print_position_info(context):
    #打印当天成交记录
    trades = get_trades()
    yesterday = context.previous_date
    for _trade in trades.values():
        print('成交记录：'+str(_trade))
    #打印账户信息
    for position in list(context.portfolio.positions.values()):
        securities=position.security
        cost=position.avg_cost
        price=position.price
        ret=100*(price/cost-1)
        value=position.value
        amount=position.total_amount
        mean_5 = get_mean_price(securities, yesterday, 5)
        mean_10 = get_mean_price(securities, yesterday, 10)
        mean_20 = get_mean_price(securities, yesterday, 20)
        mean_60 = get_mean_price(securities, yesterday, 60)
        mean_120 = get_mean_price(securities, yesterday, 120)
        temp = [mean_5, mean_10, mean_20, mean_60]
        log.info(np.std(temp))
        print('代码:{}'.format(securities))
        print('成本价:{}'.format(format(cost,'.2f')))
        print('现价:{}'.format(price))
        print('收益率:{}%'.format(format(ret,'.2f')))
        print('持仓(股):{}'.format(amount))
        print('市值:{}'.format(format(value,'.2f')))
        
        print('———————————————————————————————————')
    print('———————————————————————————————————————分割线————————————————————————————————————————')