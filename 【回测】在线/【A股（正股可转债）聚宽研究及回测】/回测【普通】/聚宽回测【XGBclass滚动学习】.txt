# 克隆自聚宽文章：https://www.joinquant.com/post/47974
# 标题：机器学习滚动训练框架
# 作者：MarioC

from jqdata import *
from jqfactor import *
import numpy as np
import pandas as pd
import pickle
from xgboost import XGBClassifier ,XGBRegressor
import warnings

warnings.filterwarnings("ignore")

# 初始化函数
def initialize(context):
    # 设定基准
    set_benchmark('000985.XSHG')
    # 用真实价格交易
    set_option('use_real_price',True)
    # 打开防未来函数
    set_option("avoid_future_data",True)
    # 将滑点设置为0
    set_slippage(FixedSlippage(0))
    # 设置交易成本万分之三，不同滑点影响可在归因分析中查看
    set_order_cost(OrderCost(open_tax=0,close_tax=0.001,open_commission=0.0003,close_commission=0.0003,
                             close_today_commission=0,min_commission=5),type='stock')
    # 过滤order中低于error级别的日志
    log.set_level('order','error')
    # 初始化全局变量
    g.stock_num=50
    g.hold_list=[]  # 当前持仓的全部股票
    g.yesterday_HL_list=[]  # 记录持仓中昨日涨停的股票
    # 因子列表
    g.factor_list= ['liquidity',#流动性因子【风格】解释了由股票相对的交易活跃度不同而产生的收益率差异
    'VDIFF',#计算VMACD因子的中间变量【交易量】
    'VEMA26',#成交量的26日指数移动平均
    # 'WVAD',#威廉变异离散量
    'money_flow_20',#20日zi'jin
    ]
    # 设置交易运行时间
    run_daily(prepare_stock_list,'9:05')#股票准备
    run_daily(check_limit_up,'14:00')#涨停判断
    # #交易执行
    run_monthly(trade,1,'9:35')
    # run_weekly(trade,2,'9:40')

# 1-1 准备股票池
def prepare_stock_list(context):
    # 获取已持有列表
    g.hold_list=[]
    for position in list(context.portfolio.positions.values()):
        stock=position.security
        g.hold_list.append(stock)
    # 获取昨日涨停列表
    if g.hold_list != []:
        df=get_price(g.hold_list,end_date=context.previous_date,frequency='daily',fields=['close','high_limit'],
                       count=1,panel=False,fill_paused=False)
        df=df[df['close']== df['high_limit']]
        g.yesterday_HL_list=list(df.code)
    else:
        g.yesterday_HL_list=[]
        
def get_factor_data(securities_list,date):
    factor_data=get_factor_values(securities=securities_list,\
                                    factors=g.factor_list ,\
                                    count=1,\
                                    end_date=date)
    df_jq_factor=pd.DataFrame(index=securities_list)
    for i in factor_data.keys():
        df_jq_factor[i]=factor_data[i].iloc[0,:]
    return df_jq_factor
    
# 1-2 选股模块
def get_stock_list(context):
    # 指定日期防止未来数据
    yesterday=context.previous_date
    today=context.current_dt
    stocks=get_all_securities('stock',yesterday).index.tolist()
    stockslist=filter_kcbj_stock(stocks)
    stockslist=filter_st_stock(stockslist)
    initial_list=filter_paused_stock(stockslist)
    stockslist=filter_new_stock(context,stockslist)
    stockslist=filter_limitup_stock(context,stockslist)
    stockslist=filter_limitdown_stock(context,stockslist)
    N=20#滑窗大小
    by_date=get_trade_days(end_date=context.previous_date,count=150)#使用最近200天的数据进行训练
    by_date=by_date[::-1]#倒序排列
    print("by_date",by_date)
    dateList=by_date[::N]#每N日滚动一个周期（这里用的20天也就是以20个交易日为间隔取数据）
    print("dateList",dateList)
    dateList=dateList[::-1].tolist()#取完数据倒序排列，并且转换成list（转换过程会改变数据格式）
    print("dateList",dateList)
    train_data=pd.DataFrame()
    print("dateList[:-1]",dateList[:-1])#训练的是未来N日的收益率，同时去掉最后一天避免未来函数
    for date in dateList[:-1]:#使用最近20天的数据进行学习【最后一天也就是yesterday不参与计算】
        factor_origl_data=get_factor_data(stockslist,date)
        data_close=get_price(stockslist,date,dateList[dateList.index(date)+1],'1d','close')['close']
        factor_origl_data['pchg']=data_close.iloc[-1]/data_close.iloc[0]-1#计算的一日收益率
        # SZ=get_price('000985.XSHG',by_date,yesterday,'1d','close')['close']
        # factor_origl_data['SZ']=SZ.iloc[-1]/SZ.iloc[0]-1
        # factor_origl_data['LABEL']=factor_origl_data['pchg']-factor_origl_data['SZ']
        # factor_origl_data['label']=0 
        # factor_origl_data.loc[factor_origl_data['LABEL'] > 0.1,'label']=1 
        ##这里以标的对平均涨幅的相对涨幅为预测目标【比较奇怪的是分类之后非1即0，这个排名起的什么作用呢】
        factor_origl_data=factor_origl_data.sort_values(by=['pchg'],ascending=False)
        factor_origl_data=factor_origl_data.iloc[:int(len(factor_origl_data['pchg'])/10*3),:].append(factor_origl_data.iloc[int(len(factor_origl_data['pchg'])/10*7):,:])
        factor_origl_data['label']=list(factor_origl_data['pchg'].apply(lambda x:1 if x>np.mean(list(factor_origl_data['pchg'])) else 0))  
        train_data=train_data.append(factor_origl_data)
    X_train=train_data[g.factor_list]
    y_train=train_data['label']
    classification_model=XGBClassifier()#区分的涨跌
    classification_model.fit(X_train,y_train)
    df=get_factor_data(stockslist,yesterday)
    X_test=df[g.factor_list]
    y_pred_proba=classification_model.predict_proba(X_test)[:,1]
    df['total_score']=list(y_pred_proba)
    df=df.sort_values(by=['total_score'],ascending=False)
    target_list=df.index.tolist()
    target_list=target_list[:g.stock_num]#奇怪分类法做的排名
    return target_list
    
# 1-3 整体调整持仓
def trade(context):
    target_list=get_stock_list(context)
    for stock in g.hold_list:
        if (stock not in target_list) and (stock not in g.yesterday_HL_list):
            position=context.portfolio.positions[stock]
            close_position(position)
    position_count=len(context.portfolio.positions)
    target_num=len(target_list)
    if target_num > position_count:
        value=context.portfolio.cash / (target_num - position_count)
        for stock in target_list:
            if stock not in list(context.portfolio.positions.keys()):
                if open_position(stock,value):
                    if len(context.portfolio.positions)== target_num:
                        break
 
# 1-4 调整昨日涨停股票
def check_limit_up(context):
    now_time=context.current_dt
    if g.yesterday_HL_list != []:
        # 对昨日涨停股票观察到尾盘如不涨停则提前卖出，如果涨停即使不在应买入列表仍暂时持有
        for stock in g.yesterday_HL_list:
            current_data=get_price(stock,end_date=now_time,frequency='1m',fields=['close','high_limit'],
                                     skip_paused=False,fq='pre',count=1,panel=False,fill_paused=True)
            if current_data.iloc[0,0] < current_data.iloc[0,1]:
                log.info("[%s]涨停打开，卖出" % (stock))
                position=context.portfolio.positions[stock]
                close_position(position)
            else:
                log.info("[%s]涨停，继续持有" % (stock))

# 3-1 交易模块-自定义下单
def order_target_value_(security,value):
    if value== 0:
        log.debug("Selling out %s" % (security))
    else:
        log.debug("Order %s to value %f" % (security,value))
    return order_target_value(security,value)

# 3-2 交易模块-开仓
def open_position(security,value):
    order=order_target_value_(security,value)
    if order != None and order.filled > 0:
        return True
    return False

# 3-3 交易模块-平仓
def close_position(position):
    security=position.security
    order=order_target_value_(security,0)  # 可能会因停牌失败
    if order != None:
        if order.status== OrderStatus.held and order.filled== order.amount:
            return True
    return False

# 2-1 过滤停牌股票
def filter_paused_stock(stock_list):
    current_data=get_current_data()
    return [stock for stock in stock_list if not current_data[stock].paused]

# 2-2 过滤ST及其他具有退市标签的股票
def filter_st_stock(stock_list):
    current_data=get_current_data()
    return [stock for stock in stock_list
            if not current_data[stock].is_st
            # and 'ST' not in current_data[stock].name
            # and '*' not in current_data[stock].name
            # and '退' not in current_data[stock].name
            ]

# 2-3 过滤科创北交股票
def filter_kcbj_stock(stock_list):
    for stock in stock_list[:]:
        if stock[0]== '4' or stock[0]== '8' or stock[:2]== '68' or stock[0]== '3':
            stock_list.remove(stock)
    return stock_list

# 2-4 过滤涨停的股票
def filter_limitup_stock(context,stock_list):
    last_prices=history(1,unit='1m',field='close',security_list=stock_list)
    current_data=get_current_data()
    return [stock for stock in stock_list if stock in context.portfolio.positions.keys()
            or last_prices[stock][-1] < current_data[stock].high_limit]

# 2-5 过滤跌停的股票
def filter_limitdown_stock(context,stock_list):
    last_prices=history(1,unit='1m',field='close',security_list=stock_list)
    current_data=get_current_data()
    return [stock for stock in stock_list if stock in context.portfolio.positions.keys()
            or last_prices[stock][-1] > current_data[stock].low_limit]

# 2-6 过滤次新股
def filter_new_stock(context,stock_list):
    yesterday=context.previous_date
    return [stock for stock in stock_list if
            not yesterday - get_security_info(stock).start_date < datetime.timedelta(days=375)]
