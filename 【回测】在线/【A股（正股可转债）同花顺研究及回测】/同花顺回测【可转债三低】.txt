#!pip install xcsc-tushare
#原则上需要通过tushare对强制赎回信息根据信息发布时间进行二次确认，但是因为supermind无法安装各种库，所以这个回测暂时不涉及强赎问题（收益可能比较低）
import numpy as np
import pandas as pd
import datetime
import math
def init(context):
    set_benchmark('000001.SH') # 设置基准收益为上证指数
    log.info('策略开始运行,初始化函数全局只运行一次') # 打印日志
    # 印花税千分之一不用单独设置【A股、ETF、可转债都是默认千一的印花税】
    set_commission(PerShare(type='stock',cost=0.0001,min_trade_cost=5.0)) # 手续费0.03%
    set_slippage(PriceSlippage(0.00000)) # 设置可转债交易滑点0.00000
    
    #开盘交易
    run_daily(func=trade, time_rule='after_open', hours=0, minutes=10)
    # run_daily(func=buytrade, time_rule='after_open', hours=0, minutes=15)
    # run_daily(func=trade, time_rule='after_open', hours=0, minutes=40)
    # run_daily(func=buytrade, time_rule='after_open', hours=0, minutes=45)
    
    #收盘交易
    # run_daily(func=trade, time_rule='after_open', hours=0, minutes=40)
    # run_daily(func=buytrade, time_rule='after_open', hours=0, minutes=45)
    # run_daily(func=trade, time_rule='before_close', hours=0, minutes=15)
    # run_daily(func=buytrade, time_rule='before_close', hours=0, minutes=10)
    
def symbol_convert(stock):#股票代码加后缀
    #北交所的股票8字开头，包括82、83、87、88，其中82开头的股票表示优先股；83和87开头的股票表示普通股票、88开头的股票表示公开发行的。
    if (stock.startswith("60"))or(#上交所主板
        stock.startswith("68"))or(#上交所科创板
        stock.startswith("11"))or(#上交所可转债
        (stock.startswith("51"))or(stock.startswith("56"))or(stock.startswith("58"))):#上交所ETF
        return str(str(stock)+".SH")
        # return str(str(stock)+".SS")
    elif (stock.startswith("00"))or(#深交所主板
        stock.startswith("30"))or(#深交所创业板
        stock.startswith("12"))or(#深交所可转债
        (stock.startswith("15"))):#深交所ETF
        return str(str(stock)+".SZ")
    else:
        print("不在后缀转换名录",str(stock))
        return str(str(stock))
        
def filter_kcb_stock(stocks):  # 过滤科创北交股票
    for stock in stocks[:]:
        if stock[0] == "4" or stock[0] == "8" or stock[:2] == "68":
            stocks.remove(stock)
        # if stock[0] == "3": # 顺道去掉创业板看一看
        #     stocks.remove(stock)
    return stocks
    
def trade(context,bar_dict):
    now=get_datetime()
    start_date=now.strftime("%Y-%m-%d")
    last_date=(now-datetime.timedelta(days=250)).strftime("%Y-%m-%d")
    print(start_date,last_date)
    today=get_trade_days(end_date=start_date, count=2).values[1]
    today=np.datetime_as_string(today, unit="D").replace("-", "")
    yesterday=get_trade_days(end_date=start_date, count=2).values[0]
    preyesterday=np.datetime_as_string(yesterday, unit="D")
    yesterday=preyesterday.replace("-", "")
    print(today, yesterday)

    # 获取所有可转债（当前可交易的）【这个函数回测的时候会报错】
    df=get_all_securities('cbond',today).reset_index(drop=False)
    print("当日可交易转债总数",len(df)) # 这里只有579只
    df=df.rename(columns={"symbol":"代码","display_name":"转债名称"})
    df=df[["代码","转债名称","end_date","start_date","market_hq"]]
    df=df[df["start_date"]<(datetime.datetime.strptime(yesterday,"%Y%m%d"))] # 去掉未上市的
    df=df[df["end_date"]>=(datetime.datetime.strptime(yesterday,"%Y%m%d")+datetime.timedelta(days=180))] # 去掉半年内到期的
    print("去掉即将到期的之后",len(df)) # 去掉即将退市的有559只
    # 获取全市场可转债余额变动表
    balance=run_query(query(cbond_remaining_change))
    balance=balance.rename(columns={
        "cbond_remaining_change_symbol":"代码",
        "cbond_remaining_change_change_date":"转债余额变更日",
        "cbond_remaining_change_remaining":"转债余额"}) # 转债余额的单位是万
    # balance.to_csv("balance.csv")
    # balance=balance[balance["转债余额变更日"]<(datetime.datetime.strptime(yesterday,"%Y%m%d")+datetime.timedelta(days=180)).date()] # 去掉180天内到期或者赎回的
    balance=balance[balance["转债余额变更日"]<=(datetime.datetime.strptime(yesterday,"%Y%m%d")+datetime.timedelta(days=-1)).date()] # 去掉-1天内到期或者赎回的【这个相当于不过滤强赎了，这些公告主要算余额的不是强赎公告】
    balance=balance.sort_values(by='转债余额变更日', ascending=False)
    balance=balance.groupby("代码").apply(lambda x: x[:1]) # 只保留最后一天
    balance=balance.reset_index(drop=True) # 重置索引
    balance=balance[["代码","转债余额变更日","转债余额"]]
    balance=balance[(balance["转债余额"]!=0)] # 单位是万元，这里其实是小于2.5亿
    # balance.to_csv("可转债余额变动表.csv")
    # # 获取全市场可转债转股价变更表【总共600只】
    rateprice=run_query(query(cbond_conversion_change))
    rateprice=rateprice.rename(columns={"cbond_conversion_change_symbol":"代码",
                                    "cbond_conversion_change_change_date":"转股价变更日",
                                    "cbond_conversion_change_report_date":"转股价变更公告日",
                                    "cbond_conversion_change_conversion_price":"更新后转股价格",
                                   }) # 转债余额的单位是万
    rateprice=rateprice.sort_values(by='转股价变更日', ascending=False)
    rateprice=rateprice.groupby("代码").apply(lambda x: x[:1]) # 只保留最后一天
    rateprice=rateprice.reset_index(drop=True) # 重置索引
    rateprice=rateprice[["代码","转股价变更日","转股价变更公告日","更新后转股价格"]]
    # rateprice.to_csv("可转债转股价变更表.csv")
    # # 可转债标的和正股标的对应关系
    df_cbonds=run_query(query(cbond_info))
    df_cbonds=df_cbonds[(df_cbonds["cbond_info_pub_enddate"]>=(datetime.datetime.strptime(yesterday,"%Y%m%d")+datetime.timedelta(days=180)).date())] # 转债结束日期在180天之后
    df_cbonds=df_cbonds.rename(columns={"cbond_info_symbol":"代码","cbond_info_stock_symbol":"正股代码"})
    df_cbonds=df_cbonds[["代码","正股代码","cbond_info_pub_enddate"]] # 这里只有448只
    df_cbonds=df_cbonds[(df_cbonds["代码"].str.startswith("12"))|df_cbonds["代码"].str.startswith("118")] # 只保留12开头的深债或者118开头的科创板债
    # 拼接之前的数据
    df_cbonds=df_cbonds.merge(df,on="代码",how="inner").reset_index(drop=True) # 拼接之前的可转债余额变动表
    df_cbonds=df_cbonds.merge(balance,on="代码",how="inner").reset_index(drop=True) # 拼接之前的可转债余额变动表
    df_cbonds=df_cbonds.merge(rateprice,on="代码",how="inner").reset_index(drop=True) # 拼接之前的可转债转股价变更表
    # 剔除正股ST的标的
    stocks=get_all_securities('stock',today).index.tolist()
    stocks=[stock for stock in stocks if ((stocks[0]!= "4") and (stock[0] != "8"))] # 去掉北交所新三板股票【没有去688的科创板股票】
    stocks=[stock for stock in stocks if stock in df_cbonds["正股代码"].tolist()] # 提前去掉正股不符合基本面要求的标的
    df_stocks = get_price(
        securities=stocks,
        start_date=None,
        end_date=today,
        fre_step='1d',
        fields=["is_st"], # 获取全部数据列
        skip_paused=True,
        fq='pre',
        # fq=None, # 这里动态复权或者不复权都是可以的
        bar_count=1,
        is_panel=1,).to_frame()
    df_stocks=df_stocks[(df_stocks["is_st"]==0)] # 当天去除ST，但是不去除停牌，因为正股停牌不影响ST
    df_stocks=df_stocks.reset_index() # 重置索引
    df_stocks = df_stocks.rename(columns={"minor":"正股代码"})
    df_stocks = df_stocks[["正股代码"]]
    # 对正股数据拼接基本面【预防未来ST】（加上这个之后选出来的股票总数会去掉两只）
    olddf = get_fundamentals(query(
        asharevalue.symbol,
        income.overall_income,
        income.np_atsopc,
        ),date=yesterday)
    olddf = olddf.rename(columns={
            "asharevalue_symbol":"正股代码",
            "income_overall_income":"营业总收入",
            "income_np_atsopc":"归母净利润",
        })
    # olddf = olddf[olddf["营业总收入"] > 100000000]
    olddf = olddf[olddf["归母净利润"] > 0]
    olddf = olddf[["正股代码","营业总收入"]]
    df_stocks = df_stocks.merge(olddf,on="正股代码",how="inner")
    # 拼接正股数据
    df_cbonds=df_cbonds.merge(df_stocks,on="正股代码",how="inner")
    print("去掉正股ST的",len(df_cbonds))
    # 设置获取k线的时间
    timestame=(now-datetime.timedelta(minutes=2)).strftime("%Y%m%d %H:%M")
    # 获取债券一分钟k数据
    cbonds=df_cbonds["代码"].tolist()
    df_cbonds_price = get_price(
        securities=cbonds,
        start_date=None,
        
        # # 日级别数据
        # end_date=today,
        # fre_step='1d',
        # fields=["open"],
        
        # # 分钟级别数据
        end_date=timestame,
        fre_step='1m',
        fields=["open"],
        skip_paused=True,
        fq='pre',
        # fq=None, # 这里动态复权或者不复权都是可以的
        bar_count=1,
        is_panel=1,).to_frame()
    df_cbonds_price=df_cbonds_price.reset_index()
    df_cbonds_price=df_cbonds_price[df_cbonds_price["open"]<150]
    df_cbonds_price=df_cbonds_price.rename(columns={"minor":"代码","open":"可转债价格"})
    df_cbonds_price=df_cbonds_price[["代码","可转债价格"]]
    df_cbonds=pd.merge(df_cbonds, df_cbonds_price, on="代码")
    # 获取正股一分钟k数据
    stocks=df_cbonds["正股代码"].tolist()
    df_stocks_price = get_price(
        securities=stocks,
        start_date=None,
        
        # # 日级别数据
        # end_date=today,
        # fre_step='1d',
        # fields=["open"],
        
        # # 分钟级别数据
        end_date=timestame,
        fre_step='1m',
        fields=["open"],
        skip_paused=True,
        fq='pre',
        # fq=None, # 这里动态复权或者不复权都是可以的
        bar_count=1,
        is_panel=1,).to_frame()
    df_stocks_price=df_stocks_price.reset_index()
    df_stocks_price=df_stocks_price.rename(columns={"minor":"正股代码","open":"正股价格"})
    df_stocks_price=df_stocks_price[["正股代码","正股价格"]]
    df_cbonds=pd.merge(df_cbonds, df_stocks_price, on="正股代码")
    df_cbonds["转股溢价率"]=df_cbonds["可转债价格"]/((100/df_cbonds["更新后转股价格"])*df_cbonds["正股价格"])
    df_cbonds["总市值"]=df_cbonds["可转债价格"]*df_cbonds["转债余额"]/10000
    
    df_cbonds["三低指数"]=df_cbonds["总市值"]*df_cbonds["转股溢价率"]
    # df_cbonds["三低指数"]=df_cbonds["总市值"]
    
    df_cbonds["排名"]=df_cbonds["三低指数"].rank(method="max", ascending=True,na_option='bottom')
    df_cbonds["代码"]=df_cbonds["代码"].str.replace("\D","").astype(str)

    numbuystock=30  # 设置持仓数量
    dftwo=df_cbonds.nsmallest(math.ceil(1.5*numbuystock), "三低指数")
    dfone=df_cbonds.nsmallest(math.ceil(numbuystock), "三低指数")
    # dftwo.to_csv(str(start_date) + "可转债（同花顺）卖出.csv")
    # dfone.to_csv(str(start_date) + "可转债（同花顺）买入.csv")
    dftwo["代码"]=dftwo["代码"].apply(lambda x: symbol_convert(x)).astype(str) # 需要指定类型为字符串
    dfone["代码"]=dfone["代码"].apply(lambda x: symbol_convert(x)).astype(str) # 需要指定类型为字符串
    buylisttwo=dftwo["代码"].values
    buylistone=dfone["代码"].values
    print("******",buylistone, buylisttwo)
    
    positionsed=context.portfolio.stock_account.positions
    positions=positionsed.copy()
    print("positions",positions,type(positions))
    print("开始卖出")
    for stock in positions:
        if stock not in buylisttwo:
            print(stock,type(stock))
            print("不在应持仓列表中",stock)
            close_position(stock)
    print("开始买入") # 根据股票数量分仓
    position_count = len(context.portfolio.stock_account.positions)
    if numbuystock > position_count:
        targetcash=context.portfolio.stock_account.available_cash # 复投
        value = targetcash / (numbuystock - position_count) # 固定比例
        # value = 800000 / numbuystock # 固定金额
        if value>0:
            for stock in buylistone:
                if context.portfolio.stock_account.positions[stock].market_value == 0:
                    if open_position(stock, value):
                        if len(context.portfolio.stock_account.positions) == numbuystock:
                            break
    print("现在持有股票数量",len(context.portfolio.stock_account.positions))

def order_target_value_(security, value): #交易模块-自定义下单
 if value == 0:
  print("Selling out %s" % (security))
 else:
  print("Order %s to value %f" % (security, value))
 return order_target_value(security, value)
def open_position(security, value): #交易模块-开仓
    order = order_target_value_(security, value)
    order=get_order(order)
    print(order)
    if (order != None) and (order.status == ORDER_STATUS.FILLED):
        print('买入成功')
        return True
    return False
def close_position(position): #交易模块-平仓
 order = order_target_value_(position,0)  # 可能会因停牌失败
 order=get_order(order)
 print(order)
 if (order != None) and (order.status == ORDER_STATUS.FILLED) and (order.filled_amount == order.amount):
     print('卖出成功')
     return True
 return False