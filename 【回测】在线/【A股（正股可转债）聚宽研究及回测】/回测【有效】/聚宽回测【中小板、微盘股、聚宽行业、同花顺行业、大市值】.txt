# 微信：lianghuajiaoyi123456
import time
import datetime
import pandas as pd
import talib
import math
from jqdata import * # 导入基础数据库
from jqfactor import * # 导入财务指标库
from jqlib.technical_analysis import * # 导入技术指标库
# 初始化函数，设定基准等等
def initialize(context):
    set_benchmark("000001.XSHG") # 设定上证指数作为基准
    # set_option('async_order', True) # 开启异步报单
    # set_option("match_with_order_book", True) # 开启盘口撮合模式
    set_option("use_real_price", True) # 开启动态复权模式(真实价格)
    set_option("avoid_future_data", True) # 开启避免未来函数模式
    set_slippage(FixedSlippage(0.001)) # 设定滑点为固定值
    set_slippage(PriceRelatedSlippage(0.00246)) # 设定滑点为百分比
    # 股票类每笔交易时的手续费是：买入时佣金万分之三，卖出时佣金万分之三加千分之一印花税, 每笔交易佣金最低扣5块钱
    set_order_cost(OrderCost(close_tax=0.001, open_commission=0.0003, close_commission=0.0003, min_commission=5), type="stock")
    log.set_level("order", "error") # 过滤掉order系列API产生的比error级别低的log
    # run_daily(trade,"9:35")
    run_weekly(trade,2,'10:00') #每周调仓【选股】#效果不好
    # run_weekly(trade,2,'14:30') #每周调仓【选股】

def symbol_convert(stock):#股票代码加后缀
    #北交所的股票8字开头，包括82、83、87、88，其中82开头的股票表示优先股；83和87开头的股票表示普通股票、88开头的股票表示公开发行的。
    if (stock.startswith("60"))or(#上交所主板
        stock.startswith("68"))or(#上交所科创板
        stock.startswith("11"))or(#上交所可转债
        (stock.startswith("51"))or(stock.startswith("56"))or(stock.startswith("58"))):#上交所ETF
        return str(str(stock)+".XSHG")
        # return str(str(stock)+".SS")
    elif (stock.startswith("00"))or(#深交所主板
        stock.startswith("30"))or(#深交所创业板
        stock.startswith("12"))or(#深交所可转债
        (stock.startswith("15"))):#深交所ETF
        return str(str(stock)+".XSHE")
    else:
        print("不在后缀转换名录",str(stock))
        return str(str(stock))

def trade(context):
    start_date=context.current_dt.date()
    today = get_trade_days(start_date=None, end_date=start_date, count=2)[1]
    yesterday = get_trade_days(start_date=None, end_date=start_date, count=2)[0]
    print(today,yesterday)
    
    ##微盘、中小、大市值
    # stocks=list(get_all_securities(types=['stock'], date=yesterday).index)
    stocks=get_index_stocks("000985.XSHG",date=yesterday) # 中证全指
    # stocks=get_index_stocks("399101.XSHE",date=yesterday) # 中小综指
    stocks=filter_kcb_stock(stocks) # 过科创板股票
    stocks=filter_st_paused_stock(stocks) # 去除ST、停牌
    #分钟频数据
    timestame=context.current_dt
    df = get_price(stocks,end_date=timestame,frequency='1m',fields=['open','low_limit','high_limit'], skip_paused=False, fq='pre', count=1, panel=False, fill_paused=True)
    df=df.reset_index()
    # df=df[df["open"]>4]
    df=df.rename(columns={"code":"代码","time":"时间","high_limit":"涨停价","low_limit":"跌停价"})
    df=df[["代码","时间","open","涨停价","跌停价"]]
    write_file("分钟频数据.csv",df.to_csv(index=False),append=True)
    dfup=df[df["open"]==df["涨停价"]].copy()
    todayup=dfup["代码"].tolist()
    dfdown=df[df["open"]==df["跌停价"]].copy()
    g.todaydown=[]#存放跌停标的
    g.todaydown=dfdown["代码"].tolist()
    print("当日涨停",len(todayup),todayup)
    print("当日跌停",len(g.todaydown),g.todaydown)
    ##日频数据
    # df=get_price(stocks,frequency="1d",count=1,end_date=today,fields=["open"]).to_frame()
    # df=df.reset_index()
    # df=df[df["open"]>4]
    # df=df.rename(columns={"minor": "代码"})
    ##基本面数据
    olddf=get_fundamentals(query(
        indicator,
        balance,
        income.np_parent_company_owners,
        valuation.pb_ratio,
        valuation.capitalization,
        ).filter(valuation.code.in_(stocks)),date=yesterday)
    olddf=olddf.rename(columns={
        "code":"代码",
        "np_parent_company_owners":"归母净利润",
        # "total_operating_revenue":"营业总收入",
        "capitalization":"总股本", # 拿前日总股本乘以当日开盘价更加贴合实际总市值
        "pb_ratio":"市净率",
    })
    olddf = df.merge(olddf,on="代码",how="inner")
    olddf["市净率"]=1/olddf["市净率"]
    olddf["总市值"]=olddf["总股本"]*olddf["open"]*1e4
    olddf=olddf[olddf["归母净利润"]>0]
    # olddf=olddf[olddf["营业总收入"]>100000000]
    # olddf["代码"] = olddf["代码"].str.replace("\D","").astype(str)
    # #微盘股
    # numbuystock=30
    # dftwo=olddf.nsmallest(math.ceil(1.5*numbuystock),"总市值")
    # dfone=olddf.nsmallest(math.ceil(numbuystock),"总市值")
    #中小板
    numbuystock=9
    dftwo=olddf.nsmallest(math.ceil(1.5*numbuystock),"总市值")
    dfone=olddf.nsmallest(math.ceil(numbuystock),"总市值")
    # #大市值
    # numbuystock=5
    # olddf=olddf.nlargest(math.ceil(numbuystock*4),"总市值")
    # dftwo=olddf.nlargest(math.ceil(numbuystock*1.5),"市净率")
    # dfone=olddf.nlargest(math.ceil(numbuystock),"市净率")
    
    
    
    # ##龙头
    # stockslist=get_industries(name="jq_l1",date=yesterday).index.tolist() # 聚宽一级行业数据(一创聚宽)
    # print(stockslist)
    # bkdf=pd.DataFrame({})
    # for stock in stockslist: # 获取行业类成分股
    #     stocks=get_industry_stocks(stock,date=yesterday) # 行业成分股
    #     stocks = filter_kcb_stock(stocks) # 去除科创北交
    #     stocks = filter_st_paused_stock(stocks) # 去除停牌
    #     # ##日频数据
    #     # df=get_price(stocks,frequency="1d",count=1,end_date=today,fields=["open"]).to_frame()
    #     # df=df.reset_index()
    #     # df=df[df["open"]>4]
    #     # print(stock,len(df))
    #     # df["板块"]=stock
    #     # df = df.rename(columns={"minor": "代码"})
    #     # bkdf=pd.concat([bkdf,df])
    #     ##分钟频数据
    #     timestame=context.current_dt
    #     df = get_price(stocks,end_date=timestame,frequency='1m',fields=['open','low_limit','high_limit'], skip_paused=False, fq='pre', count=1, panel=False, fill_paused=True)
    #     df=df.reset_index()
    #     df=df[df["open"]>4]
    #     df=df.rename(columns={"code":"代码","time":"时间","high_limit":"涨停价","low_limit":"跌停价"})
    #     df=df[["代码","时间","open","涨停价","跌停价"]]
    #     df["板块"]=stock
    #     # write_file("分钟频数据.csv",df.to_csv(index=False),append=True)
    #     bkdf=pd.concat([bkdf,df])
    # # write_file("聚宽一级行业对照表.csv",bkdf.to_csv(index=False),append=True)
    # dfup=bkdf[bkdf["open"]==bkdf["涨停价"]].copy()
    # todayup=dfup["代码"].tolist()
    # dfdown=bkdf[bkdf["open"]==bkdf["跌停价"]].copy()
    # g.todaydown=[]#存放跌停标的
    # g.todaydown=dfdown["代码"].tolist()
    # print("当日涨停",len(todayup),todayup)
    # print("当日跌停",len(g.todaydown),g.todaydown)
    # print("bkdf",bkdf)
    # oldstocks=bkdf["代码"].tolist()
    # # 基本面数据
    # olddf=get_fundamentals(query(valuation,indicator,balance,income).filter(valuation.code.in_(oldstocks)),date=yesterday)
    # olddf=olddf.rename(columns={
    #     "code":"代码",
    #     "np_parent_company_owners":"归母净利润",
    #     "total_operating_revenue":"营业总收入",
    #     "capitalization":"总股本", # 拿前日总股本乘以当日开盘价更加贴合实际总市值
    # })
    # olddf = bkdf.merge(olddf,on="代码",how="inner")
    # olddf["总市值"]=olddf["总股本"]*olddf["open"]*1e4
    # olddf=olddf[olddf["归母净利润"]>0]
    # # olddf=olddf[olddf["营业总收入"]>100000000]
    # numbuystock=30
    # rate=len(olddf)/numbuystock
    # dftwo=olddf.groupby("板块").apply(lambda x: x.nsmallest(int(2*math.ceil(x.shape[0]/rate)),"总市值"))
    # dfone=olddf.groupby("板块").apply(lambda x: x.nsmallest(int(math.ceil(x.shape[0]/rate)), "总市值"))
    # dftwo=dftwo.nsmallest(math.ceil(2*numbuystock),"总市值")
    # dfone=dfone.nsmallest(math.ceil(numbuystock),"总市值")
    # # dfone["代码"]=dfone["代码"].apply(lambda x: symbol_convert(x)).astype(str) # 需要指定类型为字符串
    # # dftwo["代码"]=dftwo["代码"].apply(lambda x: symbol_convert(x)).astype(str) # 需要指定类型为字符串
    
    #执行交易环节
    buylistone=dfone["代码"].tolist()
    buylisttwo=dftwo["代码"].tolist()
    print("dfone",dfone,"dftwo",dftwo)
    
    print("开始卖出")
    for stock in context.portfolio.positions:
        if (stock not in todayup):#涨停的不卖出
            if (stock not in buylisttwo):
                log.info("[%s]不在应买入列表中" % (stock))
                position = context.portfolio.positions[stock]
                close_position(position)
    print("开始买入") # 根据股票数量分仓
    #计算当前的最新持仓【仓位的话把这里乘以0.8，平时就全仓就行】
    position_count = len(context.portfolio.positions)
    buycount = numbuystock-position_count#计算需要补仓的数量【缺多少只补多少只资金利用率高】
    value=context.portfolio.available_cash/buycount if  buycount!=0 else 0# 余额处理
    # value=context.portfolio.total_value/numbuystock # 总额处理
    for stock in context.portfolio.positions:
        thispostion=context.portfolio.positions[stock]
        thispostionmoney=thispostion.price*thispostion.total_amount
        if thispostionmoney<value*0.8:#金额不足，补仓
            open_position(stock,value)#这个是买够多少钱的仓位
    if numbuystock > position_count:
        if value>0:
            for stock in buylistone:
                if (stock not in todayup)and(stock not in g.todaydown):#涨停或者跌停的不买入
                    if context.portfolio.positions[stock].total_amount == 0:
                        if open_position(stock, value):
                            if len(context.portfolio.positions) == numbuystock:
                                break
    print("现在持有股票数量",len(context.portfolio.positions))
    
#过滤函数
def filter_kcb_stock(stocks): #过滤科创北交股票
    for stock in stocks[:]:
        if stock[0] == "4" or stock[0] == "8" or stock[:2] == "68":
        # if stock[0] == "4" or stock[0] == "8" or stock[:2] == "68" or stock[:1] == "30":
            stocks.remove(stock)
    return stocks
def filter_st_paused_stock(stocks):#过滤ST及其他具有退市标签的股票
    current_data = get_current_data()
    return [stock for stock in stocks
            if (not current_data[stock].is_st)
            and (not current_data[stock].paused)
            # and ("ST" not in current_data[stock].name)
            # and ("*" not in current_data[stock].name)
            # and ("退" not in current_data[stock].name)
            ]
def filter_new_stock(stocks):
    yesterday = context.previous_date
    return [stock for stock in stocks if not yesterday - get_security_info(stock).start_date < datetime.timedelta(days=250)]
#交易模块-自定义下单
def order_target_value_(security, value):
	if value == 0:
		log.debug("Selling out %s" % (security))
	else:
		log.debug("Order %s to value %f" % (security, value))
	return order_target_value(security, value)
#交易模块-开仓
def open_position(security, value):
	order = order_target_value_(security, value)
	if order != None and order.filled > 0:
		return True
	return False
#交易模块-平仓
def close_position(position):
	security = position.security
	order = order_target_value_(security,0) # 可能会因停牌失败
	if order != None:
		if order.status == OrderStatus.held and order.filled == order.amount:
			return True
	return False